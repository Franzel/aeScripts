function copyPasteMultiple(){	var copyPasteMultiple = this;	var project = app.project;	var selectedComp = project.activeItem;	var currSelection;	var bSelection;	this.buildUI = function(thisObj){		var pal = (thisObj instanceof Panel) ? thisObj : new Window("palette", "Expression Editor", undefined, {resizeable:true});		//resource specs		var res =		"group { orientation:'column', alignment:['fill', 'top'], alignChildren:['fill', 'top'], \			gr_Actions: Panel { orientation:'column', alignChildren:['fill', 'top'],\				copyBtn: Button { text:'Copy Value', preferredSize:[100,20]}, \				applyBtn: Button { text:'Apply Value', preferredSize:[100,20]}, \			},\			gr_Editor: Group { orientation:'column', \					infoField : StaticText {text:'Current Property: ', alignment:['left','top'], characters: 60}, \			} \		}";		pal.grp = pal.add(res);		//help tips		pal.grp.gr_Actions.copyBtn.helpTip = "copy parameter";		//callbacks		pal.grp.gr_Actions.copyBtn.onClick = function(){			app.beginUndoGroup("Copy Parameter");			copyPasteMultiple.getSelectedProperty();			pal.grp.gr_Editor.infoField.text = "Current Property: " + currSelection.parentProperty.name + " > "+ currSelection.name + "= " + currSelection.value;			$.writeln("Current Property: " + currSelection.name + "= " + currSelection.value);			app.endUndoGroup();		};		pal.grp.gr_Actions.applyBtn.onClick = function(){			app.beginUndoGroup("Paste Parameter");			copyPasteMultiple.pasteValue();			app.endUndoGroup();		};		//show UI			if (pal instanceof Window){			pal.center();			pal.show();		}else{			pal.layout.layout(true);		}	};//end buildUI	this.getSelectedProperty = function(thisObj){		if(selectedComp instanceof CompItem ){			if(selectedComp.selectedProperties.length>0){				var selLayer = selectedComp.selectedLayers[0];				var selProperty = selLayer.selectedProperties[0];				var selPropertyName;				var selParameter;				var selParameterName;				var selValue;				// if(!selProperty.parentProperty.isEffect){				// 	$.write(selProperty.parentProperty.parentProperty.name);				// 	$.write(" > ");				// 	$.write(selProperty.name);				// 	$.write(" = ");				// }else{				// 	$.write(selProperty.parentProperty.parentProperty.parentProperty.name);				// 	$.write(" > ");				// 	$.write(selProperty.parentProperty.name);				// 	$.write(" > ");				// 	$.write(selProperty.name);				// 	$.write(" = ");				// }				// $.writeln(selProperty.value);				if(selProperty instanceof Property){					selPropertyName = selProperty.name;					if(selProperty.isSpatial){						selValue = selProperty.value;					}else{						selValue = selProperty.value;					}					$.write(selProperty.parentProperty.parentProperty.name);					$.write(" > ");					$.write(selProperty.name);					$.write(" = ");					$.writeln(selValue);					currSelection = selProperty;					//return selProperty;					} else if (selProperty instanceof PropertyGroup){					selPropertyName = selProperty.name;					selParameter = selProperty.property(1);					selParameterName = selParameter.name;					selValue = selParameter.value;					$.write(selParameter.parentProperty.parentProperty.parentProperty.name);					$.write(" > ");					$.write(selParameter.parentProperty.name);					$.write(" > ");					$.write(selParameter.name);					$.write(" = ");					$.writeln(selValue);					currSelection = selParameter;					//return selParameter;				} else {					alert("No selected Property");				}			} else {				alert("select a Property first");			}		} else {			alert("select a Comp first");		}	}//end function	this.pasteValue = function(thisObj){		$.writeln("master : " + currSelection.name);		if(selectedComp instanceof CompItem ){			if(selectedComp.selectedLayers.length>0){				$.writeln(selectedComp.selectedLayers.length);			}else{				alert("select some layers first");			}			for(var i=0 ; i<selectedComp.selectedLayers.length; i++){				for(var j=1; j<selectedComp.selectedLayers[i].property("Transform").numProperties+1 ;j++){					if(selectedComp.selectedLayers[i].property("Transform").property(j).name == currSelection.name){						$.writeln("FOUND TRANSFORM TARGET");						selectedComp.selectedLayers[i].property("Transform").property(j).setValue(currSelection.value);					}				}				for(var j=1; j<selectedComp.selectedLayers[i].property("Effects").numProperties+1 ;j++){					$.writeln(selectedComp.selectedLayers[i].property("Effects").property(j).name);					if(selectedComp.selectedLayers[i].property("Effects").property(j).property(1).name == currSelection.name){						$.writeln("FOUND EFFECT TARGET");					}				}			}		}	}	this.run = function(thisObj){		// if(this.getSelectedProperty() !== undefined){		// 	if(!this.getSelectedProperty().parentProperty.isEffect){		// 		$.write(this.getSelectedProperty().parentProperty.parentProperty.name);		// 		$.write(" > ");		// 		$.write(this.getSelectedProperty().name);		// 		$.write(" = ");		// 	}else{		// 		$.write(this.getSelectedProperty().parentProperty.parentProperty.parentProperty.name);		// 		$.write(" > ");		// 		$.write(this.getSelectedProperty().parentProperty.name);		// 		$.write(" > ");		// 		$.write(this.getSelectedProperty().name);		// 		$.write(" = ");		// 	}		// 	$.writeln(this.getSelectedProperty().value);		// }				this.buildUI(thisObj);	}}; //end main functionnew copyPasteMultiple().run(this); // change this to build UI				// $.write("comp: " + selectedComp.name);				//$.write(" , ");				// $.write("Layer: " + selLayer.layerName);				// $.write(" , ");				// $.write("Property: " + selPropertyName);				// $.write(" , ");				// $.write("Parameter: " + selParameterName);				// $.write(" , ");				// if(selProperty.isSpatial){				// 	$.write("Value: ");				// 	$.write(selProperty.value[0]);				// 	$.write(",");				// 	$.write(selProperty.value[1]);				// 	$.write(",");				// 	$.write(selProperty.value[2]);				// }else{				// 	$.write("Value: " + selProperty.value);				// }