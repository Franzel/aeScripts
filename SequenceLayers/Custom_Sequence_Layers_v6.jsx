/*This script provides an window to copy, edit and apply expressions to the selected PropertyFrancisco ZamoranoJuly 2015*/function sequenceLayers(){	this.ascending = true;	this.timeSpan = 2.0;  //time from beginning to end to sequence	this.randomMax = 0.0; //set to Zero if no random is desired	this.bStartFromZero = false;	var sequenceLayers = this;	this.buildUI = function (thisObj){		var pal = (thisObj instanceof Panel) ? thisObj : new Window("palette", "Expression Editor", undefined, {resizeable:true});		//resource specs		var res = 		"group { orientation:'column', alignment:['left', 'top'], alignChildren:['left', 'top'], \			gr_Actions: Panel { orientation:'row', alignChildren:['left', 'top'],\				runBtn: Button { text:'Run', preferredSize:[50,20]}, \				resetBtn: Button { text:'Reset', preferredSize:[50,20]} \			},\			gr_StackOrder: Panel{orientation:'row', text:'Stack Order', alignment:['fill','fill'], alignChildren:['fill','center'],\				ascRadioBtn: RadioButton{text:'Ascending', value:true},\				descRadioBtn: RadioButton{text:'Descending', value:false},\            },\        	gr_TimeControl: Panel{orientation:'column', text:'Time Controls', alignment:['fill','center'], alignChildren:['right','top'],\				gr_TimeSpanGroup: Group{orientation: 'row', alignChildren:['right','center'],\					myTimeSpanTextTitle: StaticText{text:'TimeSpan (sec)'},\					timeSpanEditText: EditText{text: '2.0',preferredSize:[40,20], alignment:['center','right']},\				},\				gr_RandomGroup: Group{orientation: 'row', alignChildren:['right','center'],\					myRandomTextTitle: StaticText{text:'Random Amount (sec)'},\					randomEditText: EditText{text:'0.0',preferredSize:[40,20]},\				},\				gr_StartTimeGroup: Group{orientation: 'row', alignChildren: ['right','center'], \					myStartTimeTextTitle: StaticText{text:'Start From time 00:00'},\					startTimeTextCheckBox: Checkbox{value: false},\				},\            },\        	gr_Extend: Panel{orientation:'row', alignment:['fill','fill'],\				myTimeSpanTextTitle: StaticText{text:'Extend to End of Comp'},\				extendBtn: Button{text:'Extend', preferredSize:[60,23]},\            }\		}";		pal.grp = pal.add(res);		// Callbacks		pal.grp.gr_Actions.runBtn.onClick = function(){			getSelectedProperty();		};		pal.grp.gr_Actions.resetBtn.onClick = function(){			resetLayers();		};		pal.grp.gr_StackOrder.ascRadioBtn.onClick = function(){			if (!(this.value)){				ascending = false;			}else{				ascending = true;			}			$.writeln(ascending);		}		pal.grp.gr_StackOrder.descRadioBtn.onClick = function(){			if (!(this.value)){				ascending = true;			}else{				ascending = false;			}			$.writeln(ascending);		}		// Set time span		pal.grp.gr_TimeControl.gr_TimeSpanGroup.timeSpanEditText.onChange = function(){			timeSpan = parseFloat(this.text);			$.writeln(timeSpan);		}		// Set random		pal.grp.gr_TimeControl.gr_RandomGroup.randomEditText.onChange = function(){			randomMax = parseFloat(this.text);			$.writeln(randomMax);		}		pal.grp.gr_TimeControl.gr_StartTimeGroup.startTimeTextCheckBox.onClick = function(){			if (this.value){				bStartFromZero = true;			}else{				bStartFromZero = false;			}			$.writeln(bStartFromZero);		}					// Extend Layers		pal.grp.gr_Extend.extendBtn.onClick = function(){			extendOutPoint();		}		// show UI		if (pal instanceof Window){			pal.center();			pal.show();		}else{			pal.layout.layout(true);		}	};	getSelectedProperty = function (){        $.writeln("run");	};	resetLayers = function (){        $.writeln("reset");	};	extendOutPoint = function(){		$.writeln("extend");	};	this.run = function (thisObj){		this.buildUI(thisObj);	};}//end mainnew sequenceLayers().run(this);