// Creates a Solid and applies a new mask to it.// Draws the mask in a circle using a sin-cos function//// Francisco Zamorano, 2014var project = app.project;var compName = " ";var myComp = project.item(getIndexFromName(compName));myComp.layers.addSolid([1,Math.random(0,1),0],"mySolid", myComp.width, myComp.height, 1, myComp.duration); //Add Solidvar mySolid = myComp.layer("mySolid"); //Get the SolidmySolid.Masks.addProperty("Mask");  //Add a Mask property to the Solidvar myMask = mySolid.property("ADBE Mask Parade").property(1); //Get the Mask propertyvar myShape = new Shape(); //Create a new empty shape in memorymyShape.vertices = createMaskPoints(mySolid.width, mySolid.height); //Assign values//$.writeln(myShape.vertices);myShape.closed  = true;myShape.rotoBezier  = true;myMask.property("maskPath").setValue(myShape); //Copy vertex values to the mask.//---------------------------------------------------------function createMaskPoints (solidWidth, solidHeight) {  //set center  var centerX = solidWidth/2;  var centerY = solidHeight/2;  var maskArray = [];  //create empty array  //declare variables  var angle = 0;  var nSteps = 72;  var increment = (Math.PI * 2) / nSteps; //angle between steps  var radius = 200;  for(var i=0; i<nSteps; i++){      angle += increment;      var frequency = nSteps/48;      var modInfluence = 6;      var mod = Math.cos(angle * frequency) * modInfluence; //play with this value to get different results      //$.writeln(mod)      var x = centerX + Math.cos(angle) * (radius + mod);      var y = centerY + Math.sin(angle) * (radius + mod);      var arr = [x,y]; //create a bidimensional array      maskArray.push(arr);  //copy arr to our main array  }  return maskArray;}/*----------------------------------------------------------------------------------------------------------------------------*/function getIndexFromName(_name){    for(var i=1;i<project.items.length+1;i++){        var currComp = project.item(i);        if (currComp.name == _name){            //alert(currComp.name +" " + project.item(i).name + " " + i);            return i;        }    } }